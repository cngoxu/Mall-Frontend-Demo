<script>
    $(document).ready(function () {
        // 初始化模态框
        const deleteModal = M.Modal.init($('#delete-confirm-modal'));
        const statusModal = M.Modal.init($('#status-confirm-modal'));

        let currentProductId = null;
        let currentAction = null;
        let currentPage = 1;
        const itemsPerPage = 6;
        let allProducts = []; // 存储所有商品数据

        // 加载所有商品数据
        function loadAllProducts() {
            // 显示加载中动画
            $('#products-list').html(`
                <div class="col s12 center-align" style="padding: 40px 0;">
                    <div class="preloader-wrapper big active">
                        <div class="spinner-layer spinner-teal-only">
                            <div class="circle-clipper left">
                                <div class="circle"></div>
                            </div>
                            <div class="gap-patch">
                                <div class="circle"></div>
                            </div>
                            <div class="circle-clipper right">
                                <div class="circle"></div>
                            </div>
                        </div>
                    </div>
                    <p>正在加载商品...</p>
                </div>
            `);

            customAjax({
                path: '/product/list-user-products',
                method: 'GET',
                success: function (data) {
                    allProducts = data || [];
                    renderPage(1); // 初始渲染第一页
                },
                fail: function (message) {
                    $('#products-list').html(`
                        <div class="col s12 center-align" style="padding: 40px 0;">
                            <i class="material-icons large grey-text">error_outline</i>
                            <h5>加载失败</h5>
                            <p>${message || '无法加载商品数据'}</p>
                            <a href="javascript:location.reload()" class="btn waves-effect waves-light teal">重新加载</a>
                        </div>
                    `);
                }
            });
        }

        // 渲染指定页面的商品
        function renderPage(page) {
            currentPage = page;
            const totalItems = allProducts.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);

            // 计算当前页的商品
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage, totalItems);
            const pageProducts = allProducts.slice(startIndex, endIndex);

            // 渲染商品列表
            renderProducts(pageProducts);

            // 渲染分页
            renderPagination(totalItems, page, totalPages);
        }

        // 渲染商品列表
        function renderProducts(products) {
            // 没有商品数据
            if (!products || products.length === 0) {
                $('#products-list').html(`
                    <div class="col s12 center-align" style="padding: 40px 0;">
                        <i class="material-icons large grey-text">inbox</i>
                        <h5>暂无商品</h5>
                        <p>点击上方按钮发布您的第一个商品</p>
                    </div>
                `);
                return;
            }

            let html = '';
            products.forEach(product => {
                html += renderMyProduct(product);
            });

            $('#products-list').html(html);
            bindProductEvents();
        }

        // 渲染分页
        function renderPagination(totalItems, currentPage, totalPages) {
            if (totalPages <= 1) {
                $('#pagination-container').empty();
                return;
            }

            let html = '<ul class="pagination">';

            // 上一页按钮
            if (currentPage > 1) {
                html += `
                    <li class="waves-effect">
                        <a href="#" data-page="${currentPage - 1}">
                        <i class="material-icons">chevron_left</i>
                        </a>
                    </li>
                `;
            } else {
                html += `
                    <li class="disabled">
                        <a href="#!">
                        <i class="material-icons">chevron_left</i>
                        </a>
                    </li>
                `;
            }

            // 页码
            for (let i = 1; i <= totalPages; i++) {
                html += `
                    <li class="${currentPage === i ? 'active teal' : 'waves-effect'}">
                        <a href="#" data-page="${i}">${i}</a>
                    </li>
                `;
            }

            // 下一页按钮
            if (currentPage < totalPages) {
                html += `
                    <li class="waves-effect">
                        <a href="#" data-page="${currentPage + 1}">
                        <i class="material-icons">chevron_right</i>
                        </a>
                    </li>
                `;
            } else {
                html += `
                    <li class="disabled">
                        <a href="#!">
                        <i class="material-icons">chevron_right</i>
                        </a>
                    </li>
                `;
            }

            html += '</ul>';
            $('#pagination-container').html(html);
            bindPaginationEvents();
        }

        // 绑定商品操作事件
        function bindProductEvents() {
            // 删除商品事件
            $('.delete-product').click(function (e) {
                e.preventDefault();
                const card = $(this).closest('.card');
                currentProductId = card.data('product-id');
                currentAction = 'delete';
                $('#delete-confirm-modal').modal('open');
            });

            // 上下架商品事件
            $('.toggle-status').click(function (e) {
                e.preventDefault();
                const card = $(this).closest('.card');
                currentProductId = card.data('product-id');
                currentAction = 'toggle-status';

                const isActive = $(this).hasClass('orange-text');

                $('#status-modal-title').text(isActive ? '确认下架商品' : '确认上架商品');
                $('#status-modal-content').text(
                    isActive ? '下架后用户将无法购买此商品' : '上架后用户将可以购买此商品'
                );

                $('#status-confirm-modal').modal('open');
            });
        }

        // 绑定分页事件
        function bindPaginationEvents() {
            $('.pagination a[data-page]').click(function (e) {
                e.preventDefault();
                const page = $(this).data('page');
                if (!$(this).parent().hasClass('disabled') && !$(this).parent().hasClass('active')) {
                    renderPage(page);
                }
            });
        }

        // 确认删除
        $('#confirm-delete').click(function () {
            if (!currentProductId) return;

            customAjax({
                path: '/product/remove',
                method: 'DELETE',
                data: { productId: currentProductId },
                success: function (data) {
                    M.toast({ html: '商品已删除' });
                    // 从本地数据中移除该商品并重新渲染
                    allProducts = allProducts.filter(p => p.id !== currentProductId);
                    renderPage(Math.min(currentPage, Math.ceil(allProducts.length / itemsPerPage)));
                },
                fail: function (message) {
                    M.toast({ html: '删除失败: ' + message });
                },
                complete: function () {
                    $('#delete-confirm-modal').modal('close');
                }
            });
        });

        // 确认状态变更
        $('#confirm-status-change').click(function () {
            if (!currentProductId) return;

            const card = $(`.card[data-product-id="${currentProductId}"]`);
            const isActive = card.find('.toggle-status').hasClass('orange-text');
            const newStatus = isActive ? 'inactive' : 'active';
            
            customAjax({
                path: '/product/publish',
                method: 'POST',
                data: { productId: currentProductId, 
                    status: newStatus },
                success: function (data) {
                    M.toast({ html: `商品已${isActive ? '下架' : '上架'}` });
                        // 更新本地数据并重新渲染当前页
                    const product = allProducts.find(p => p.productId === currentProductId);
                    if (product) {
                        product.status = newStatus;
                    }
                    renderPage(currentPage);
                },
                fail: function (message) {
                    M.toast({ html: '操作失败: ' + message });
                },
                complete: function () {
                    $('#status-confirm-modal').modal('close');
                }
            });
        });

        // 初始加载所有商品数据
        loadAllProducts();
    });
</script>

<script>
    function renderMyProduct(product){
        return `
            <div class="col s12 m6 l4">
                <div class="card hoverable" data-product-id="${product.productId}">
                <div class="card-image">
                    <img src="${product.images || '/images/default-product.png'}">
                    ${product.status === 'inactive' ?
                        '<span class="badge grey">已下架</span>' :
                        product.stock <= 0 ?
                            '<span class="badge red">已售罄</span>' :
                            '<span class="badge teal">在售中</span>'}
                </div>
                <div class="card-content">
                    <span class="card-title truncate">${product.title}</span>
                    <p class="grey-text text-darken-2">¥${product.price.toFixed(2)}</p>
                    <p>库存: ${product.stock} | 销量: ${product.sales}</p>
                </div>
                <div class="card-action">
                    <a href="/product/${product.productId}/edit" class="blue-text">编辑</a>
                    ${product.status === 'active' ?
                        '<a href="#" class="orange-text toggle-status">下架</a>' :
                        '<a href="#" class="teal-text toggle-status">上架</a>'}
                    <a href="#" class="red-text delete-product">删除</a>
                </div>
                </div>
            </div>
        `;
    }
</script>